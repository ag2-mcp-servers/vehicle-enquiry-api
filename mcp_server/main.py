# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:34:33+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header

from models import ErrorResponse, Vehicle, VehicleRequest

app = MCPProxy(
    contact={
        'email': 'DvlaAPIAccess@dvla.gov.uk',
        'name': 'DVLA API Team',
        'x-twitter': 'GDSTeam',
    },
    description='Interface specification for the DVLA Vehicle Enquiry API',
    title='Vehicle Enquiry API',
    version='1.1.0',
    servers=[
        {
            'description': 'Production environment',
            'url': 'https://driver-vehicle-licensing.api.gov.uk/vehicle-enquiry',
        },
        {
            'description': 'Test environment',
            'url': 'https://uat.driver-vehicle-licensing.api.gov.uk/vehicle-enquiry',
        },
    ],
)


@app.post(
    '/v1/vehicles',
    description=""" Returns vehicle details based on registration number """,
    tags=['vehicle_information_retrieval'],
)
def get_vehicle_details_by_registration_number(
    x_api_key: str = Header(..., alias='x-api-key'),
    x__correlation__id: Optional[str] = Header(None, alias='X-Correlation-Id'),
    body: VehicleRequest = ...,
):
    """
    Get vehicle details by registration number
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
